<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cache | Liu.Shatle]]></title>
  <link href="http://shatle.github.com/blog/categories/cache/atom.xml" rel="self"/>
  <link href="http://shatle.github.com/"/>
  <updated>2014-03-04T09:29:57+08:00</updated>
  <id>http://shatle.github.com/</id>
  <author>
    <name><![CDATA[liu.shatle &hearts; gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Cache]]></title>
    <link href="http://shatle.github.com/blog/2013/07/02/Rails-Cache/"/>
    <updated>2013-07-02T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/07/02/Rails-Cache</id>
    <content type="html"><![CDATA[<p>在完成 rails 应用的功能之后，要考虑优化（重构）！</p>

<p>关于 rails 的 cache 问题，网络上已经有很多说法了，我主要参考以下：</p>

<p>http://guides.rubyonrails.org/caching_with_rails.html</p>

<p>http://hawkins.io/2011/05/advanced_caching_in_rails/</p>

<p>http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works</p>

<p>或许有版本问题，虽然我没遇到，但是学习精华在于领会方法。</p>

<p>缓存，个人觉得是根据访问频度和更新频度的数据，估计并平衡两者，才能进而提高响应速度。</p>

<h3>Fragment Cache</h3>

<p>对于碎片化的缓存，主流还是在这的，因为现今多数网站都是动态的。对于 Page Cache 大多数人并不推崇！</p>

<p>相信多数人会用 layout：</p>

<p>```ruby</p>

<h1>in application.haml</h1>

<p>...
%body
  = render 'header'
  = yield
  = render 'bottom'
```</p>

<p>```ruby</p>

<h1>in _header.haml</h1>

<p>%p header content
```</p>

<p>在重构加入 cache 时，可以通过两种简单的方法：</p>

<h4>方法一</h4>

<p>```ruby</p>

<h1>in application.haml</h1>

<p>...
%body
  = render 'header'
  = yield
  = render 'bottom'
```</p>

<p>```ruby</p>

<h1>in _header.haml</h1>

<p>= cache("header_part") do
  %p header content
```</p>

<h4>方法二</h4>

<p>```ruby</p>

<h1>in application.haml</h1>

<p>...
%body
  = cache("header") do</p>

<pre><code>= render 'header'
</code></pre>

<p>  = yield
  = render 'bottom'
```</p>

<p>```ruby</p>

<h1>in _header.haml</h1>

<p>%p header content
```</p>

<p>明显第二种方法较好，其产生的效果：</p>

<p><code>ruby
Read fragment views/header (0.2ms)
</code></p>

<p>而第一种会有：</p>

<p><code>ruby
Read fragment views/header (0.2ms)
  Rendered share/header.haml (0.5ms)
</code></p>

<hr />

<p>其实，最好在设置 cache 时，同时设置时时效，<a href="http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works">David: 4 This generates a lot of cache garbage</a>。虽然有些存储设备自动清理访问较少的资源（memcached 有这样的机制），但是对于明确的资源，手动设置时效可以很好地清理或者更新内容。</p>

<p><code>ruby
= cache("bottom", :expires_in =&gt; 7.days) do
</code></p>
]]></content>
  </entry>
  
</feed>
