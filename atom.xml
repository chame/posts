<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Liu.Shatle]]></title>
  <link href="http://shatle.github.com/atom.xml" rel="self"/>
  <link href="http://shatle.github.com/"/>
  <updated>2013-12-21T23:15:51+08:00</updated>
  <id>http://shatle.github.com/</id>
  <author>
    <name><![CDATA[liu.shatle &hearts; gmail.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ngRepeat with ngModel in RadioBtn]]></title>
    <link href="http://shatle.github.com/blog/2013/12/21/ngrepeat-with-ngmodel-in-radiobtn/"/>
    <updated>2013-12-21T23:05:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/12/21/ngrepeat-with-ngmodel-in-radiobtn</id>
    <content type="html"><![CDATA[<p>相信大家开始接触<code>ng-repeat</code>时，很容易就明白了以下代码的作用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%li</span>(<span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span>)
</span><span class='line'>  <span class="nt">%span</span> 
</span></code></pre></td></tr></table></div></figure>


<p>那么，当<code>ng-repeat</code>和<code>ng-model</code>结合起来呢：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%li</span>(<span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span>)
</span><span class='line'>  <span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;select_item&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span>)
</span><span class='line'>
</span><span class='line'><span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;select_item&quot;</span>)
</span></code></pre></td></tr></table></div></figure>


<p>从代码上看，多个RadioBtn分在同一组，然后显示选择项的值。但是，这在实际操作中是不行的。</p>

<blockquote><p>The ngRepeat directive instantiates a template once per item from a collection. <strong>Each template instance gets its own scope</strong>, where the given loop variable is set to the current collection item, and $index is set to the item index or key.</p></blockquote>

<p><code>ng-repeat</code>会为每个实例产生自己的作用域。也就是说，<code>ng-model="select_item"</code>与<code>items</code>不是同一作用层级的；而相似的，<code>ng-model="select_item"</code>和<code>value="select_item"</code>是同一作用层级的。所以，<code>value="select_item"</code>并不能正常访问<code>ng-model="select_item"</code>中的变化值，需要将<code>ng-model</code>提升层级，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nt">%li</span>(<span class="na">ng-repeat=</span><span class="s">&quot;item in items&quot;</span>)
</span><span class='line'>  <span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;radio&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;$parent.select_item&quot;</span> <span class="na">name=</span><span class="s">&quot;item&quot;</span> <span class="na">value=</span><span class="s">&quot;&quot;</span>)
</span><span class='line'>
</span><span class='line'><span class="nt">%input</span>(<span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">value=</span><span class="s">&quot;select_item&quot;</span>)
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modified Greyshade theme to my Pages]]></title>
    <link href="http://shatle.github.com/blog/2013/12/19/modified-greyshade-theme-to-my-pages/"/>
    <updated>2013-12-19T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/12/19/modified-greyshade-theme-to-my-pages</id>
    <content type="html"><![CDATA[<p>好久没有写文章了，在这里，更甚。</p>

<p>不知道为不什么，今天突然想起是折腾一下自己的博客。好吧，自从 writing.io 声明关闭之后，站主谈到的<code>我们都是在重复造轮子</code>，确实是。</p>

<p>年初折腾的博客网站，基本只有我一个人。没有任何的访问量，真心没有什么念头。生活的种种，又没有空去打理些什么，可能以后得慢慢回归 pages.github.com 了。</p>

<p><a href="https://github.com/shashankmehta/greyshade">Greyshade</a> 也是修改别人的，在它的基础上，再做了些修改。反正，在我这里，有许多样式都觉得有问题。</p>

<p>修改的部分包括：</p>

<ul>
<li>.left-col</li>
<li>article header h1</li>
<li>.archives article time, tags</li>
<li>&#8230;</li>
</ul>


<p>发现问题，以后再继续吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用了 Inkscape 画了两张图]]></title>
    <link href="http://shatle.github.com/blog/2013/11/26/two-pictures-with-Inkscape/"/>
    <updated>2013-11-26T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/11/26/two-pictures-with-Inkscape</id>
    <content type="html"><![CDATA[<h2>使用了 Inkscape 画了两张图</h2>

<p>作为编程的人员来说，视觉设计很可能会很勉强，我也不例外。更多时候，我的视觉设计基本是利用前端框架，呵呵。
我试图改变，于是，贴上两张图&#8230;</p>

<p>不得不承认，虽然自己常常以文艺青年自居，但是，更多时候，只能算是普通青年与2B青年之间。</p>

<p>角落的吉他，已经忘却了声音，却尘法饱满；柜上的四五本图书，痕迹永远的是前面几页；甚至，还有《秘密》《秘密2》&#8230;</p>

<p>想拾起些什么，却又不能回答丢了些什么&#8230;</p>

<p>打住！</p>

<p>说说，页面设计。AI，相信是大多数设计师使用的工具吧，然而，在 Ubuntu 中，我使用了 Inkscape。</p>

<p>自己凭空，想象、猜想、臆测&#8230;</p>

<p>结果，得出的视觉效果，连自己都不能容忍。不得不从 <a href="http://dribbble.com">Dribbble</a> 上找图，自己在 Inkscape 上画。</p>

<p>所以，我说，我画了「两张图」，而不是设计！</p>

<h3>Blog Design</h3>

<p>参照别人的成果，画出来的。</p>

<p><img src="http://shatle.github.com/images/photo/blog-1.png" alt="blog-1.png" /></p>

<h3>CMS</h3>

<p>参照别人的成果，画出来的。</p>

<p><img src="http://shatle.github.com/images/photo/cms-1.png" alt="cms-1.png" /></p>

<p>工具，永远要记住的是其性质，它就是用来用的。由于很长时间，没有用画图相关的工具了，手不由得变得生疏。圈圈点点的东西，很多。</p>

<p>记得之前选修课时，学过很多的工具，当时学得还蛮好的。但是，岁月怎么看都是刀，一片片刮下的，永远都只会沉下深海。</p>

<p>画这两张图时，我更多的体会是：要先有内容。没有内容，感觉就是一张大白纸，很难凭空去设计些什么，就如刚开始的样子。或者说，自己至少在心里，确定设计的目的是什么，有什么作用。不能简单的以为，自己可以设计好框架，任何人可以往里面加内容，如何如何的&#8230;</p>

<p>希望自己更文艺些，不想太被快节奏的物质生活所左右，或者&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Position]]></title>
    <link href="http://shatle.github.com/blog/2013/11/26/CSS-Position/"/>
    <updated>2013-11-26T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/11/26/CSS-Position</id>
    <content type="html"><![CDATA[<p>最近，遇到一个问题，不同的浏览器之间对定位展现出来的页面效果不一样，甚至同是chrome，但是window和*nix的都不一样。</p>

<p>比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">#</span> <span class="nt">css</span> <span class="nt">file</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.cont</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">position</span><span class="o">:</span> <span class="k">relative</span><span class="p">;</span>
</span><span class='line'>  <span class="k">top</span><span class="o">:</span> <span class="m">-6px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是简单的相对定位代码，绝对定位就更不好说了，可能出现的问题就更多了。绝对定位更多使用在如左边的导航操作区。对于不同浏览器之间的效果差别，我在这就不好贴出来了。</p>

<p>通过我的试验，感觉定位基本都可以用另外的方法替代。可简单由<code>float</code>、<code>margin</code>、<code>padding</code>构成：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.cont</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">float</span><span class="o">:</span> <span class="k">right</span><span class="o">:</span>
</span><span class='line'>  <span class="k">padding-right</span><span class="o">:</span> <span class="m">10px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>有时会不得不用到 margin，不过在我记忆中，好像不同的浏览器中初始值也不一样，此知识点的来源是找不到了。我潜意识里能不用则不用。</p>

<p>听同事说，定位比一般样式要耗资源，是不是呢！！</p>

<hr />

<p>最近看到一个不同浏览器内核不同的代码，如<code>webkit</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="k">@media</span> <span class="nt">screen</span> <span class="nt">and</span> <span class="o">(</span><span class="nt">-webkit-min-device-pixel-ratio</span><span class="nd">:0</span><span class="o">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">...</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>更多不同浏览器差别及相应的语法技巧，可以转到 <a href="http://browserhacks.com">browserhacks</a>，对于调试浏览器的兼容性的开发者来说是十分有益的。可恶的浏览器之争，一家独大，对于开发者来说也不见得是坏事。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tx特工第一季]]></title>
    <link href="http://shatle.github.com/blog/2013/10/23/tx-te-gong-1/"/>
    <updated>2013-10-23T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/10/23/tx-te-gong-1</id>
    <content type="html"><![CDATA[<p>从腾讯招聘微信看到的：http://codestar.alloyteam.com/1/1 ，有些意思。我的过程无厘头。</p>

<h3>1/1</h3>

<p>这一关的输入名字与邮箱。想当然地，很简单了。但是，输入相关项后，居然还是不能进入。这也是特工任务－－走后门？tx提倡走后门吗，节操何在？</p>

<p>抓包？Firefox 用户的优势体现出来了，firebug或者自带控制台的也行。请求信息中，会返回错误，其中提示没有timestamps。</p>

<p>好吧，从命令行中，敲入并执行：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$('input[name=timestamps]').value=(new Date()).valueOf()</span></code></pre></td></tr></table></div></figure>


<p>OK，点击「打开」吧。</p>

<h3>1/2</h3>

<p>这个画企鹅的事，我从来没有想过。关于这自栩的事，好吧，不说了。</p>

<p>但是题目让我迷惑了很久！</p>

<p>第一个题目还简单：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>border-radius: 50%;</span></code></pre></td></tr></table></div></figure>


<p>第二个我实在想了好久，真心的。一直找到 <code>border-corner-shape</code>这一属性，其中还看到http://lea.verou.me/2013/03/border-corner-shape-is-in-danger-and-you-can-help/ 。但结果还是不出来，可能是firefox不支持，或者是tx的js测试响应程序不支持？</p>

<p>没办法，只能看看页面了。幸运的是，页面的注释中有，</p>

<blockquote><p>可参考 http://www.alloyteam.com/2012/10/css3-draw-qq-logo/</p></blockquote>

<p>看了里面的方法，思想开朗了。之前的css运用中，一直没有注意啊，border 还有这一模型：</p>

<p><img src="http://octoper.com/photo/050faa5d8d3076e62f079f9c2dcd4dbb/border.png" alt="border.png" /></p>

<p>代码：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  border-top: 20px solid transparent;
</span><span class='line'>  border-bottom: 20px solid transparent;
</span><span class='line'>  transform-origin: top right;
</span><span class='line'>  transform: rotate(-60deg);
</span><span class='line'>  -webkit-transform: rotate(-60deg);
</span><span class='line'>
</span><span class='line'>  ...</span></code></pre></td></tr></table></div></figure>


<p>http://jsfiddle.net/shatle/fgLLS/</p>

<h3>1/3</h3>

<p>这个吧，实在没心思和时间看API文档，直接收藏了牛人的代码，然后「开战」&#8230;</p>

<h3>1/4</h3>

<p><strong>第一灯</strong>，数组克隆：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var clone = function(arr){
</span><span class='line'>return arr.slice(0);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><strong>二灯</strong>，字符串去前后空格trim：</p>

<p>开始想偷工减料的：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.ltrim().rtrim();</span></code></pre></td></tr></table></div></figure>


<p>但是不行啊，后来是：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.replace(/^\s\s*/, '').replace(/\s\s*$/, '');</span></code></pre></td></tr></table></div></figure>


<p>不过，这个应该也行</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>str.replace(/^\s+|\s+$/g,'');</span></code></pre></td></tr></table></div></figure>


<p><strong>三灯</strong>，NodeList to Array：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Array.prototype.slice.call(list);</span></code></pre></td></tr></table></div></figure>


<h2>1/5</h2>

<p>找出数字和为最大的路径。其实我是看感觉点的，基本的思路是：首先，从底往上，找出每行的最大数的方位；从上往下，预估两三行吧，差不多的，然后就过了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[new Date Syntax]]></title>
    <link href="http://shatle.github.com/blog/2013/10/12/new-Date-Syntax/"/>
    <updated>2013-10-12T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/10/12/new-Date-Syntax</id>
    <content type="html"><![CDATA[<p><img src="http://shatle.github.com/images/photo/date2013.jpg" alt="date2013.jpg" /></p>

<p>前两天笔试时，多选 Date 的语法，我经常用的有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new Date(1999,10,10);
</span><span class='line'>new Date("1999-10-10");</span></code></pre></td></tr></table></div></figure>


<p>其它的不敢多选，回来查看了 https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date ，基本语法有：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new Date();
</span><span class='line'>new Date(value);
</span><span class='line'>new Date(dateString);
</span><span class='line'>new Date(year, month, day [, hour, minute, second, millisecond]);</span></code></pre></td></tr></table></div></figure>


<p>好吧，这个<code>dateString</code>很恼人啊，幸好链接了 http://tools.ietf.org/html/rfc2822#page-14 。</p>

<p>下面形象地列出些<code>dateString</code>实例：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>new Date("1999-10-10");
</span><span class='line'>new Date("1999/10/10");
</span><span class='line'>new Date("Oct* 10, 1999");
</span><span class='line'>new Date("October 10, 1999");
</span><span class='line'>new Date("1999-Oct-10");
</span><span class='line'>new Date("1999/Oct/10");</span></code></pre></td></tr></table></div></figure>


<p><code>#Date</code> <code>#js</code></p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[evernote 修改标签]]></title>
    <link href="http://shatle.github.com/blog/2013/10/10/modify-tags-in-evernote/"/>
    <updated>2013-10-10T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/10/10/modify-tags-in-evernote</id>
    <content type="html"><![CDATA[<p>虽然用了 evernote 快两年了，但最近一年多用的都是印象笔记，没办法网络速度是硬伤。使用期间也没遇到什么问题，可能之前记录东西相对较少吧。</p>

<p>可是，在这段时间，由于找工作的原因，印象笔记的使用程序直线上升，用来记录自己不懂的知识点、错题等等。于是，时不时就会有这样子的操作。</p>

<ul>
<li>添加标签时 输入字符</li>
<li>evernote 提示字符</li>
<li>顺手敲回车</li>
<li>之前添加的类似标签上去了。</li>
</ul>


<p>功能很好，但是，有时却不是我想要的标签，只是类似而已，但已经上去了。想修改此标签，却怎么点都不行，习惯性的右键，唉，它又不是本地应用。无奈＋手懒，没太多理会，就留在上面了。</p>

<p>最近，这情况出现的次数多了，不能忍受。于是，看了网上的人是怎么做的。好吧，其实也简单 －－ <strong>直接删除</strong>。</p>

<ul>
<li>鼠标选择要删除的标签</li>
<li>按下键盘上的 Del(ete) 按钮</li>
</ul>


<p>没有直接修改啊，不过这样也不错，有进步至少。</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[居然有这命令]]></title>
    <link href="http://shatle.github.com/blog/2013/10/08/accident-from-tmux/"/>
    <updated>2013-10-08T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/10/08/accident-from-tmux</id>
    <content type="html"><![CDATA[<p>刚刚折腾 tmux ，不小心按错键，导致终端的字体变大了。哪个快捷键啊！</p>

<p>网上搜了一下，居然有这命令：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>放大快捷键：Ctrl shift + 
</span><span class='line'>缩小快捷键：Ctrl  -</span></code></pre></td></tr></table></div></figure>


<p>倒！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AVL树的删除]]></title>
    <link href="http://shatle.github.com/blog/2013/09/13/tree-3/"/>
    <updated>2013-09-13T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/13/tree-3</id>
    <content type="html"><![CDATA[<p>之前说到插入，相比插入操作，删除操作要复杂些。但是，也有共同的地方。</p>

<p>删除操作与插入操作的大体思路是相同的，引起不平衡的原因，在于某些节点的平衡因子从1变为2，从-1变为-2。调整时，需要找出离删除节点最近的此类节点，命名A节点，与插入类似。</p>

<p>最近忙，先上图，以后再写文章。</p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210729.jpg" alt="IMG_20130913_210729.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210739.jpg" alt="IMG_20130913_210739.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210751.jpg" alt="IMG_20130913_210751.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210826.jpg" alt="IMG_20130913_210826.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210836.jpg" alt="IMG_20130913_210836.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_210848.jpg" alt="IMG_20130913_210848.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[二叉搜索树]]></title>
    <link href="http://shatle.github.com/blog/2013/09/13/tree-2/"/>
    <updated>2013-09-13T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/13/tree-2</id>
    <content type="html"><![CDATA[<p>二叉搜索树有以下特点：</p>

<ol>
<li>每个节点有唯一的搜索关键值；</li>
<li>任意节点，如果存在着左子节点，那么左子节点的关键值小于此节点的关键值；</li>
<li>任意节点，如果存在着右子节点，那么右子节点的关键值大于此节点的关键值；</li>
</ol>


<p>另外，搜索树可以带索引，在每个节点中加入字段，其值为其左子树的节点数目加1。此方式的索引，可以明确地知道节点在此树中的从小到大的排序位置。</p>

<pre>
    10
   ／ \
   6 16
  / \ \
  3 8 18

关键值:索引字段值
10:4,6:2,16:1,3:1,8:1,18:1
</pre>


<p>对于此索引字段，我一直未找到其有什么作用。查找搜索，加了此索引字段就不用比较？也要比较，比较次数也不见得少。删除／插入也要查找，那么加入此索引字段作肾吗？唯一的我能看到的作用是查看当前节点的状态，给出稍微详细的信息，而不是查找。个人觉得还不如完全二叉树，直接线性表索引显然更好些。</p>

<h4>查找</h4>

<p>由于二叉搜索树的性质，是查找元素时，只要比较搜索的关键值与当前节点的关键值，小于继续搜索左子树，大于则搜索右子树，即可。时间复杂度为O(h)，由于树不一定是完全二叉树，可能存在着左、右斜二叉树，所以不一定保证O(logn)。</p>

<h4>插入</h4>

<p>按查找的思路，可以把要插入的元素的关键值看作查找此关键值。当从根节点一直往下找，如果真有此关键值，证明要插入的元素关键值重复，不能进行插入；如果查找不到，必然会最终碰到左子节点或者右子节点为空，只要将查找路径上的这个为空的左子节点或者右子节点，设置为要插入的新元素即可，成为新的节点。复杂度也是O(h)</p>

<h4>删除</h4>

<p>对于叶子节点，查找成功后，可直接删除，不影响树的结构。对于非叶子节点，需要用此节点的左子树的最大节点代替已删除的节点，或者用此节点的右子树的最小节点代替。这最大节点和最小节点应该都是叶子节点。复杂度为O(h)。</p>

<p>如，</p>

<pre>
     20
    /  \
   10  30
   /\   | \
  9 14 24 32

     14
    /  \
   10   30
   /    | \
  9    24 32

     24
    / \
   10 30
   /\   \
  9 14   32
</pre>


<p>删除20时，需要将其左子树的14上升到原根节点的位置；或者将其右子树的24上升到原根节点的位置。</p>

<h3>AVL树</h3>

<p>首先，AVL树是一种平衡树。平衡树是指节点数为n且高度为logn级别的树。AVL树是根据提出人的姓名命名的。</p>

<p>AVL树就是任意节点的左右子树的高度绝对差为1。通常会定义其<code>平衡因子＝左子树的高度 - 右子树的高度</code>，平衡因子可能是-1、0、1。</p>

<h4>查找</h4>

<p>过程如二叉搜索树一样，但AVL树的高度是logn，所以可以确定其时间复杂度是O(logn)</p>

<h4>插入</h4>

<p>插入的操作可能采用二叉搜索树的插入方法，当不平衡时，再调整节点。</p>

<p>首先，插入之前，它应该是AVL树。插入新节点之后，树可能依然是AVL树，也可能不是AVL树。而不能成为AVL树，其原因必然是：树的某些节点的平衡因子从-1变为-2，或者从1变为2。而平衡因子变化的节点，也一定是从新节点到根节点这一路径上的节点。</p>

<p>在这些新插入的节点到树的根节点这一路径中，可能存在着离新节点最近的原平衡因子为1或者为-1的A节点。从A节点到新节点之间的所有节点的平衡因子原来都应该是0。因为，如果不是0，而是1或者-1，那么A节点就找错了。</p>

<p>其次，调整。对于插入操作后不平衡的树，需要调整使得插入后的平衡因子为2或者-2的节点变回为1、0、-1。</p>

<p>基本的操作步骤：</p>

<ol>
<li><p>在树中搜索新节点的关键值，如果关键值不存在，插入并记录原树中的A节点；如果存在，退出。</p></li>
<li><p>如果没有所谓的A节点，那么修改新节点到树根节点的平衡因子，从0修改为1或者-1。</p></li>
<li><p>如果存在A节点，需要分情况：</p>

<ul>
<li>如果新插入的节点在A节点的左子树上，而A节点原平衡因子为-1，那么插入后的树也是平衡的，可直接修改从新节点到A节点上的平衡因子即可；</li>
<li>如果新插入的节点在A节点的左子树上，而A节点原平衡因子为1，那么A节点的平衡因子会变为2，需要调整；</li>
<li>如果新插入的节点在A节点的右子树上，而A节点原平衡因子为-1，那么A节点的平衡因为会变为-2，需要调整；</li>
<li>如果新插入的节点在A节点的右子树上，而A节点原平衡因子为1，那么插入后的树也是平衡的，可直接修改从新节点到A节点上的平衡因子即可；</li>
</ul>
</li>
</ol>


<p>下面对需要调整的3.2和3.3进行进一步的说明。</p>

<h5>3.2</h5>

<p>新节点在A的左子树上，又可以分两种情况：新节点在左子树的左子树上(LL)，新节点在左子树的右子树上(LR):</p>

<p><img src="http://octoper.com/photo/c69c6523e7b903d1d71bc142abf659e6/IMG_20130913_110349.jpg" alt="IMG_20130913_110349.jpg" /></p>

<p><strong>LL</strong>：对于LL情况，由于A节点的原平衡因子为1，所以必定存在B节点且其平衡因子为0。假设BL的高度为h，则BR和AR的高度应该也为h，以A为根节点的子树高度为h+2。插入后BL高度变为h+1，A节点平衡因子变为2，B节点平衡因子变为1。BL中可能有更多的节点的平衡因子从0变为1，但这里只讨论1个B，因为只有从新插入的节点到树的根节点中的节点有变化。</p>

<p>为了减少各节点平衡因子的变化，就尽量使以A为子树的高度在调整之后仍然为h+1。这里可以将B节点上移，A节点转而当作B节点的右子节点，并将BR当作A节点的左子树。对于调整的整个子树来说，原来的高度是h+2，调整后保持不变，也就不用调整A节点以上的节点的平衡因子了，但需要再次调整A和B的平衡因子。</p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_110915.jpg" alt="IMG_20130913_110915.jpg" /></p>

<p><strong>LR</strong>：对于LR情况，BR在插入新节点后，高度为h+1，也就是说，插入后必定存在C节点。而且，CL和CR的高度只可能是h或者h-1，且不能同为h-1。</p>

<p>对于此情况，不能采用LL的方法。因为把BL当作已经下沉的A的左子树，只会引起新的不平衡。</p>

<p>所以，需要把C上移，并替代原来的A节点，而A节点下沉，然后分别将CL和CR作为B和A的右子树和左子树。对于调整的整个子树来说，原来的高度是h+2，调整后保持不变，也就不用调整A节点以上的节点的平衡因子了，但需要再次调整A、B、C的平衡因子。</p>

<h4>3.3</h4>

<p>新节点在A的右子树上，又可以分两种情况：新节点在左子树的左子树上(RL)，新节点在左子树的右子树上(RR):</p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_214343.jpg" alt="IMG_20130913_214343.jpg" /></p>

<p><img src="http://shatle.github.com/images/photo/IMG_20130913_214334.jpg" alt="IMG_20130913_214334.jpg" /></p>

<p>RL、RR的调整方法基本与LR、LL一样，只是方向变化了而已，不多叙述。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树说-1]]></title>
    <link href="http://shatle.github.com/blog/2013/09/11/tree-1/"/>
    <updated>2013-09-11T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/11/tree-1</id>
    <content type="html"><![CDATA[<p>食之无味，弃之可惜。仍不知其所用，但无奈于八股。</p>

<h3>树</h3>

<p>树，就是一个非空的有限元素集合，其中一个元素为根(root)，余下的元素组合成其 <strong>子树</strong>。</p>

<p>每个元素称为节点，节点分 <strong>根节点</strong> 、<strong>叶子节点</strong>。每个节点的子树数目称为节点的 <strong>度</strong>。</p>

<p>树中，结点的最大高度为此树的 <strong>高度</strong> 或者 <strong>深度</strong>。</p>

<pre>
    A
   / \
  B   C
 / \  ｜\
D  E  F G
</pre>


<p>此树中A为根节点，DEFG为叶子节点，A的度为2，C的度为3，叶子节点的度为0。高度为3。</p>

<h3>二叉树</h3>

<p>每个节点的子树数目不多于2的树，称为二叉树。二叉树的子树分左右。其有以下性质：</p>

<ol>
<li><p>i层最多有2<sup>(i-1)个节点；</sup></p></li>
<li><p>深度为k的二叉树最多有2<sup>k-1个节点；有2<sup>k-1个节点的树称为满二叉树；由满二叉树从右到左、从下到上地缺少节点，形成的树，称为完全二叉树。</sup></sup></p></li>
<li><p>对于任意二叉树，节点数为 n，叶子节点数为 n0，度为2的节点数为 n2，度为1的节点数 n3， 有：
<code>n = n0 + n1 + n2</code>， <code>n = n1 + 2n2 + 1</code>， <code>n0 = n2 + 1</code></p></li>
<li><p>N个节点的二叉树,最大深度为N，最小深度为 log(N+1)，即完全二叉树。log在此表示以2为底。</p></li>
<li><p>n个节点的完全二叉树，从上到下、从左到右地进行编号 <code>i = 1...n</code>，有</p>

<ul>
<li>i=1表示根节点；i>1时，此元素的父节点编号为 i/2 的取整；</li>
<li>2i>n时，此元素无左孩子；否则，其左孩子编号为 2i；</li>
<li>2i+1>n时，此元素无右孩子；否则，其右孩子编号为 2i+1；</li>
</ul>
</li>
</ol>


<pre>
    A
   / \
   B   C
  / \
  D E    二叉树
 /
F

    A
   / \
   B  C
  / \ ｜\
  D E F G   满二叉树

    A
   / \
   B  C
  / \
  D E     完全二叉树

</pre>


<h3>堆</h3>

<p>最大堆／最小堆，两者都是完全二叉树。最大堆是指树中的任意节点大于或等于其孩子节点；最小堆反之。</p>

<pre>
    14
   / \
  10 12
  / \
  6 5 最大堆

    5
   / \
   6 10
  / \
 14 12 最小堆

</pre>


<h4>初始化</h4>

<p>最大堆的初始化。</p>

<p>堆首先是完全二叉树。对于任意的一组数据，按照顺序编号，可以看作是一个完全二叉树，但此树就不一定是堆。如果这组数据是存储于连续的空间，如线性表，那么其中父节点和相应的子节点，可以通过<code>父节点编号＝子节点编号/2(取整)</code>得到节点之间的关系；如果是链表，还要额外地存储左右子节点和父节点的指针，当然将每个链节点的地址另存储为线性表，从而利用<code>父节点编号＝子节点编号/2(取整)</code>公式。</p>

<p>所以，可以利用公式<code>父节点编号＝子节点编号/2(取整)</code>减少程序的访问次数。最大堆需要每个子树的根都大于其左右子节点，那么可以从最后一个子树开始初始化。即，当完全二叉树的节点数为n，那么最后子树的根节点编号应该是 n/2。如此，从 n/2 到 1，不断地构造子树成为最大堆，从而整棵树就成为最大堆。 <strong>注意</strong> ，这里的子树不仅仅指三个节点，而是某节点下方的子层，子子层等的所有节点。对于由于节点较小，需要下沉时，需要重新构造以下沉节点为根的子树。总的复杂度为O(nlogn),但实际效果要优于此。</p>

<p>如，</p>

<pre>
      10
     / \
     6  5
    /\  |\
  14 12 1 2   初始状态
  ／
 8

      14
     / \
    12  5
    /\  |\
   8 10 1 2   结束
  ／
  6
</pre>


<p>n=8，从8/2=4编号开始。编号4的节点值是14，以此节点为根的子树已经是最大堆了；然后到编号3，节点值是5，这也是最大堆了；编号2，节点值为6，此时需要与左右子节点最大的14进行交换，6下沉，下沉的6改变了以编号4为根的子树结构，所以需要重新构造子树成为堆，6继续下沉；编号1，值为10，小于编号2的14，10下沉，10小于12，下沉右节点。</p>

<h4>插入</h4>

<p>最大堆的插入操作。插入时，先将新的元素 <em>模拟</em> 放入n+1的位置，再与父节点比较，如果新的元素大于父节点的元素，将父节点元素下移，新元素插入的位置上移。按 n+1 的位置到根节点 这一路径，进行比较，当新的元素大于父节点的元素时，或者到根节点时，比较结束。最后新元素真正插入到相应的位置。由于高度最多是log(n+1)，其操作的时间复杂度为O(logn)</p>

<pre>
1)
    14
   / \
  10 12
  / \
  6 5

2) x 为新元素的模拟初始位置
    14
    / \
   10 12
   / \ |
   6 5 x

3) 当新元素大于 12 时，
父节点元素12下移，新元素要插入的位置x上移
    14
    / \
   10 x
   / \ |
   6 5 12

4) 当新元素不大于父节点元素14时，
新元素才真正地插入到x的位置上。
</pre>


<h4>删除</h4>

<p>堆的删除通常指删除根节点中的元素。最大堆中，n的二叉树删除根节点元素后，节点数目会变为n-1。删除根元素后，根节点为空，模拟将原来的最后一个元素放到此根节点的位置上。然后，与此位置的左右孩子节点比较，取最大元素并将其上移，原来最后的元素模拟下移。如此循环，直到原来最后元素大于此位置上的左右孩子节点元素，真正把原来最后元素放入此位置上。由于高度最多是log(n+1)，其操作的时间复杂度为O(logn)</p>

<pre>
1)
    14
   / \
   10 12
  / \
  6 5

2) x 为最后一个元素5的模拟初始位置
    x
   / \
  10 12
  /
 6

3) 把 5 与位置x的左右孩子节点中的元素比较，取最大的元素上移，x 位置下移
    12
   / \
   10 x
  / \
  6 5

4) 当原来最后的元素不小于其位置上的任意元素时，将最后的元素真正放入到x位置。
</pre>


<h4>堆的应用</h4>

<p>利用堆进行排序，时间复杂度为O(nlogn)。首先，将一组数据初始化为堆，需要的时间为O(nlogn)，然后直接利用堆删除的操作，将根节点提取出来，时间复杂度为O(logn),总的时间为O(nlogn)。这比普通的两个循环的时间复杂度O(n<sup>2)要好。</sup></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cron]]></title>
    <link href="http://shatle.github.com/blog/2013/09/09/Cron/"/>
    <updated>2013-09-09T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/09/Cron</id>
    <content type="html"><![CDATA[<p>利用系统自带的 cron，做定时任务，主要是备份数据</p>

<h3>查看当前任务</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ps axgu | grep cron</span></code></pre></td></tr></table></div></figure>


<h3>编辑（添加／删除）任务</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo crontab -e
</span><span class='line'>
</span><span class='line'># 例子:
</span><span class='line'>#
</span><span class='line'># 每天每分钟执行job1一次
</span><span class='line'>* * * * * /cron_jobs/job1 # Absolutely Path
</span><span class='line'>
</span><span class='line'># 每个星期一，早上 3:00 执行一次
</span><span class='line'>0 3 * * 1 /cron_jobs/job2
</span><span class='line'>
</span><span class='line'># Format:
</span><span class='line'>#
</span><span class='line'>#   分    小时     天           月               星期几          命令 
</span><span class='line'># (0-59) (0-23) (1-31)  (1-12 or Jan-Dec) (0-6 or Sun-Sat)
</span><span class='line'>#   0      2      12           *                 0,6</span></code></pre></td></tr></table></div></figure>


<h3>保存数据库数据</h3>

<p><strong>方法一</strong>:</p>

<p>定义文件<code>/cron_jobs/bk_data</code>,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #!/bin/bash
</span><span class='line'>DATE=`date +%y_%m_%d_%H_%M_%S`
</span><span class='line'>mongodump --out ./dump$DATE
</span><span class='line'>tar -cf ./dump$DATE.tar ./dump$DATE
</span><span class='line'>rm -rf dump$DATE</span></code></pre></td></tr></table></div></figure>


<p><strong>方法二</strong>: 进入项目数据库数据目录，</p>

<p>定义文件<code>/cron_jobs/bk_data</code>,内容为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> #!/bin/bash
</span><span class='line'>cd /data_path
</span><span class='line'>DATE=`date +%y_%m_%d_%H_%M_%S`
</span><span class='line'>git init ./ 
</span><span class='line'>git add ./ -A 
</span><span class='line'>git commit -am "commit with cron in $DATE"</span></code></pre></td></tr></table></div></figure>


<p><strong>其中</strong>，方法一直接使用mongodb简单的整体备份方法，方法二则使用git进行差异化备份。无论方法一、方法二，还需要添加定时任务</p>

<p>赋权限<code>chmod u+x /cron_jobs/bk_data</code>，通过<code>crontab -e</code>添加任务：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>0 3 * * 1 /cron_jobs/bk_data</span></code></pre></td></tr></table></div></figure>


<p>另外有: https://github.com/javan/whenever</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[修改mongodb配置]]></title>
    <link href="http://shatle.github.com/blog/2013/09/07/modify-mongodb-setting/"/>
    <updated>2013-09-07T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/07/modify-mongodb-setting</id>
    <content type="html"><![CDATA[<p>之前没有注意数据库安全问题，简单进行部署，于是有了安全问题。</p>

<p>从 #ruby-china@rei 的博文中看到了这一问题，由于内容是晚上在手机上看到的，地址忘记是哪了。</p>

<p>通过 10gen 下载安装 mongodb 默认是对所有的ip进行开放:</p>

<blockquote><p>http://docs.mongodb.org/manual/reference/program/mongod/</p>

<p>&#8211;bind_ip <ip address></p>

<p>The IP address that the mongod process will bind to and listen for connections. By default mongod listens for connections all interfaces. You may attach mongod to any interface; however, when attaching mongod to a publicly accessible interface ensure that you have implemented proper authentication and/or firewall restrictions to protect the integrity of your database.</p></blockquote>

<p>如果只是默认对所有ip开放访问的话：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nmap -p27017 hostname
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>Starting Nmap 5.21 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2013-09-07 16:17 CST
</span><span class='line'>Nmap scan report <span class="k">for </span>hostname
</span><span class='line'>Host is up <span class="o">(</span>0.026s latency<span class="o">)</span>.
</span><span class='line'>PORT      STATE SERVICE
</span><span class='line'>27017/tcp open  unknown
</span></code></pre></td></tr></table></div></figure>


<p>可以通过 <a href="http://docs.mongodb.org/manual/reference/program/mongo/">mongo</a> 远程访问：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mongo --host hostname
</span></code></pre></td></tr></table></div></figure>


<p>这是很可怕的。修改配置文件<code>mongodb.conf</code>，加入下行，只允许本地访问：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">bind_ip</span> <span class="o">=</span> 127.0.0.1
</span></code></pre></td></tr></table></div></figure>


<p>需要重启 mongodb，通常可以通过：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service mongodb restart
</span></code></pre></td></tr></table></div></figure>


<p>但是我的是不行的，我需要：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /etc/init.d/mongodb restart
</span><span class='line'>
</span><span class='line'><span class="c"># 或者，指定配置文件</span>
</span><span class='line'><span class="c"># $ sudo mongod -f /etc/mongodb.conf</span>
</span></code></pre></td></tr></table></div></figure>


<p>此时，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nmap -p27017 hostname
</span><span class='line'>
</span><span class='line'>Starting Nmap 5.21 <span class="o">(</span> http://nmap.org <span class="o">)</span> at 2013-09-07 16:17 CST
</span><span class='line'>Nmap scan report <span class="k">for </span>hostname
</span><span class='line'>Host is up <span class="o">(</span>0.026s latency<span class="o">)</span>.
</span><span class='line'>PORT      STATE SERVICE
</span><span class='line'>27017/tcp closed  unknown
</span></code></pre></td></tr></table></div></figure>


<p>其实，可以进行其它安全设置：http://docs.mongodb.org/manual/core/security/</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忆大学]]></title>
    <link href="http://shatle.github.com/blog/2013/09/05/the-feeling-of-university/"/>
    <updated>2013-09-05T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/09/05/the-feeling-of-university</id>
    <content type="html"><![CDATA[<p>明年就要毕业了，同学们开始忙着投简历，我也要开始了？！6年的地大学生生活啊！</p>

<p>突然发现，等待邮件回音的感觉十分不爽，想到海笔的时候不爽，看着那些似乎忘却而又相识的知识不爽，&#8230;</p>

<p>其实我并不是个喜欢多嘴的人，但我承认我这时有些抱怨、有些怀念了</p>

<p>回顾我的<strong>大学本科</strong>四年，</p>

<p><em>努力过</em> 大一那年，基本每天早起，和宿舍的同学一块到小绿园里读英文；除了上课，就是自习，就为了那个成绩；大二后期，自己在课程外开始学习rails／ruby，但对于大学才真正接触计算机的我，始终得不到要领，那时国内我只知道javaeye用了rails；</p>

<p><em>欢乐过</em> 和宿舍的同学玩过&lt;天龙>，玩过dota，而我一直处于菜鸟的水平，至今仍是，我只是喜欢和大家一块疯一下；和班里的同学一起春游、秋游，植物园、凤凰岭、百里峡、秦皇岛；</p>

<p><em>迷茫过</em> 大三后期，开始犹豫着继续读书，还是出去工作，出去又能做什么工作，留下又能得到些什么；</p>

<p>大学本科四年，我是保守的。我沿着中学的生活轨迹，延长到了大学的生活。没有去刻意追求什么，也没有什么深深地影响到我。传说中的爱情并没有出现，有的只是垂柳划动过的水面。</p>

<p>认清了人是分类别的，男人和女人；认清了人是分性格的，向上的、向下的、向前的、向后的；认清了人是要环境的，同学圈、朋友圈、老乡会；认清了人是要爱自己的，没有谁说要对你负责。</p>

<p>感受到了他人赞许的眼神，鄙视的、无视的、厌恶的、期待的，&#8230; 也同时坚定了爱自己的想法；感受到了他人给予的恩情，&#8230;</p>

<p>感谢所有接触过的人。我选择了保研，感谢父母的支持。</p>

<p><strong>研究生</strong>的两年，</p>

<p>研一所有课程结果时，我迈出了自以为是的一步，从本科老师的实验室中，出来实习rails。不容怀疑，老师肯定对我有些意见，从大三暑假就开始让我进他实验室，锻炼着我，占用了部分资源&#8230;  但是，我仍然是很感谢他们，感谢他们给予的信任和肯定，和某些有关弃子的东西。</p>

<p>自身的否定，自身的不信邪。我并不想研究生还需要家里支持些什么，大学的相对简约的我不需要也不能够再接受父母些什么。我不希望我是一个一直在获取些什么的人，我可以为社会做出些东西，从而换取些什么。</p>

<p>我试图去接触新东西，数字图像识别。感谢导师和中科院的老师，让我接触这些很有前景的知识，我也试图去理解学习这些东西，但是，我却退却了，我以为我不会后悔，而此时我有些了。</p>

<p>我利用一个学期的时间来考驾照，或许这真的错了，时间的宝贵可能并不容许我们多加浪费；因为身边的朋友一直在外面实习，而我一直啃着之前实习的老本。</p>

<p>庆幸的是，我在这段时间里，弄出了个人的网站，在此期间接触了大量的rails、js相关的知识，狠下心买了阿里云的最便宜的服务，从备案到部署，一个人完成了下来。我也不能确定，我能坚持多久，时不时地冒出些不自信来。</p>

<p>但至始至终，我仍然相信我是幸运的，我是风顺的。我并没有经历过大的风浪，没有如身边的同学抛弃本科学位学科而去当导游的霸气，没有他主动上交三四万而去当海上服务员的魄力，我是否跟着心走，至今仍然是个迷。</p>

<p>轮到的找工作的时间了，我需要努力和机缘，我讨厌不得不进行的等待，要不，请拒绝我！！https://gist.github.com/shatle/6445045</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby:　reference or value]]></title>
    <link href="http://shatle.github.com/blog/2013/08/19/Ruby-reference-or-value/"/>
    <updated>2013-08-19T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/08/19/Ruby-reference-or-value</id>
    <content type="html"><![CDATA[<p>可能有不少人纠结于 ruby 到底是传值呢，还是传引用呢。我也很纠结啊！！</p>

<p>Thanks: https://www.ruby-forum.com/topic/41160</p>

<p>相信，ruby 确实为我们提供了很多便利，但是对于部分想深入操作代码的人来说，可能不点不友好。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;a str&quot;</span>
</span><span class='line'><span class="n">copy</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;a diff str&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">copy</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; &quot;a str&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这或许是你想看到的结果，copy 不会因 str 的变化而变化，仍然保持当初由 str 得来的值。从对象的方法上说，这也是合情理的。copy 和 str 本不是同一 String 对象，当其一做出修改，根据对象的独立特性，另一个应该也不会变化，否则你也不会起不同的名称了。</p>

<p>但是有些人，会把c++中的指针套用到ruby上，因为他们想修改一个，相应修改另一个，他们才不管什么对象应该互相不影响的说法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">str</span><span class="o">=</span><span class="s">&quot;a str&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="o">*</span><span class="n">cp</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="n">str</span><span class="o">=</span><span class="s">&quot;a diff str&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">cp</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># =&gt; &quot;a diff str&quot;</span>
</span><span class='line'><span class="cp"># =&gt; &quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在ruby中，如果有此想法的你，你不得不：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;a str&quot;</span>
</span><span class='line'><span class="n">copy</span> <span class="o">=</span> <span class="n">str</span>
</span><span class='line'><span class="n">str</span><span class="o">.</span><span class="n">replace</span> <span class="s2">&quot;a diff str&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">p</span> <span class="n">copy</span>
</span><span class='line'><span class="nb">p</span> <span class="n">str</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># =&gt; &quot;a diff str&quot;</span>
</span><span class='line'><span class="c1"># =&gt; &quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>但是，为什么用 replace 替代 = 这一操作符之后，就起作用了呢？难道原本它们就是指向同一地址？很可能是！</p>

<p>网友有说可能是 replace 在 ruby 中的 kenel/Object 进行了特殊操作</p>

<blockquote><p>this should be inherited from kernel/Object and then overriden
so a clear interface can be followed, my personal belief.</p></blockquote>

<p>不过，我反而觉得是 ruby 对 = 操作符进行重写。</p>

<p>在上一代码中，ruby 为字符数组&#8221;a str&#8221;分配了内存，然后定义一个str相关的指针，指向这一字符数组的地址；然后在定义一个指针copy，其等同于str，指向也是字符数组的地址。</p>

<p>在最开始的例子中</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">str</span> <span class="o">=</span> <span class="s2">&quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>由于 str 和 copy 在前两行的定义声明中是指向同一字符数组的。此行代码，则会对新的字符数组进行比较，由于不相同，ruby 重新分配内存来存储&#8221;a diff str&#8221;，之后str重新指向这一字符数组。</p>

<p>于是，从上说法来看，<code>=</code>例子的相应c++代码可能会是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">one_string</span> <span class="o">=</span> <span class="s">&quot;a str&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="o">*</span><span class="n">str</span><span class="o">=&amp;</span><span class="n">one_string</span><span class="p">,</span> <span class="o">*</span><span class="n">copy</span><span class="p">;</span>
</span><span class='line'><span class="n">copy</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="n">other_string</span> <span class="o">=</span> <span class="s">&quot;a diff str&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">other_string</span> <span class="o">!=</span> <span class="n">one_string</span><span class="p">){</span>
</span><span class='line'>  <span class="n">str</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">other_string</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">copy</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># =&gt; &quot;a str&quot;</span>
</span><span class='line'><span class="cp"># =&gt; &quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>replace</code>例子的相应c++代码可能会是：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">string</span> <span class="n">one_string</span> <span class="o">=</span> <span class="s">&quot;a str&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">string</span> <span class="o">*</span><span class="n">str</span><span class="o">=&amp;</span><span class="n">one_string</span><span class="p">,</span> <span class="o">*</span><span class="n">copy</span><span class="p">;</span>
</span><span class='line'><span class="n">copy</span> <span class="o">=</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="o">*</span><span class="n">str</span><span class="o">=</span><span class="s">&quot;a diff str&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">cp</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="o">*</span><span class="n">str</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># =&gt; &quot;a diff str&quot;</span>
</span><span class='line'><span class="cp"># =&gt; &quot;a diff str&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为大多数的人肯定使用 <code>=</code> 操作符，而程序语言在设计时肯定会考虑内存的消耗。同样的工作与速率，内存消耗越少，当然也就越好。所以，重写<code>=</code>的可能性也就会更大些。Ruby 走的是简便的路线，你想操作指针，但它并不允许。在它的领域里，它希望你只看到对象。当你操作对象时，你已经在操作指针了。</p>

<p>当然，以上也只是我的猜测，我没有心思认真阅读 ruby 的源码。</p>

<hr />

<p>今天看到个解释比较好的，用图的：</p>

<blockquote><p>http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value#answer-10974116</p></blockquote>

<p><img src="http://shatle.github.com/images/photo/2013-08-22_09_19_31%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:19:31的屏幕截图.png" /></p>

<p><img src="http://shatle.github.com/images/photo/2013-08-22_09_19_50%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:19:50的屏幕截图.png" /></p>

<p><img src="http://shatle.github.com/images/photo/2013-08-22_09_20_12%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:12的屏幕截图.png" /></p>

<p><img src="http://shatle.github.com/images/photo/2013-08-22_09_20_28%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:28的屏幕截图.png" /></p>

<p><img src="http://shatle.github.com/images/photo/2013-08-22_09_20_46%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-22 09:20:46的屏幕截图.png" /></p>

<p>明显，此网友的理解和我的是一样的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[可恶的浏览器兼容]]></title>
    <link href="http://shatle.github.com/blog/2013/08/14/the-hell-of-browser-hack/"/>
    <updated>2013-08-14T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/08/14/the-hell-of-browser-hack</id>
    <content type="html"><![CDATA[<p>怎么说呢，浏览器我一直主要担心的是css的问题，真正细调起来，晕，js也可能有这一问题。不多说，再次推荐网站：http://browserhacks.com/</p>

<p>其实，上网站的主要也是谈到的是css的问题，当然包括些js的控制。</p>

<p>这里主要记录我遇到的问题。</p>

<h3>.trim()</h3>

<p>使用 jquery 的用户，相信已经习惯了这一方法。其作用是除去字符串前后的空字符：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">().</span><span class="nx">trim</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>可惜 IE8 对此会报错，如果你在js提交数据时，使用了这一方法，这一操作在IE8中是不会成功的！</p>

<p>在jquery中，你需要用到 <code>$.trim()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">trim</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="s1">&#39;input&#39;</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<h3>.indexOf()</h3>

<p>此方法判断所指定字符的位置，可以用到 String 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s2">&quot;12345&quot;</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">)</span>    <span class="c1">//# =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实主流浏览器中还可以对 Array 使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>      <span class="c1">//# =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<p>可惜 IE8 是不支持的，在jquery中，需要用<code>$.inArray()</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>   <span class="c1">//# =&gt; 1</span>
</span></code></pre></td></tr></table></div></figure>


<h3>.split(/\D/)</h3>

<p>根据数字来分组。但是，在不同的浏览器中，对于部分的字符串，分组的情况是不一样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">string</span> <span class="o">=</span> <span class="s2">&quot;[123, 1234]&quot;</span>
</span><span class='line'><span class="nx">arr1</span><span class="o">=</span><span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\D/</span><span class="p">)</span>     <span class="c1">//chrome# =&gt; [&quot;&quot;, 123, &quot;&quot;, 1234]</span>
</span><span class='line'><span class="nx">arr2</span><span class="o">=</span><span class="nx">string</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="sr">/\D/</span><span class="p">)</span>     <span class="c1">//IE8# =&gt; [123, 1234] </span>
</span></code></pre></td></tr></table></div></figure>


<p>http://blog.stevenlevithan.com/archives/cross-browser-split ，IE &lt; 9 对<code>/../</code>这一正则语法支持并不好。</p>

<p>可以去掉空串：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">grep</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">){</span> <span class="k">return</span> <span class="nx">value</span> <span class="o">!=</span> <span class="s2">&quot;&quot;</span><span class="p">;})</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实，对于此字符串，可以这样：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nb">eval</span><span class="p">(</span><span class="nx">string</span><span class="p">)</span>  <span class="c1">//# =&gt; [123, 123]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>:last-child</h3>

<p>不多说，IE8是不支持这一伪类的。所以，我不得不添加一个<code>last-child</code>的类，如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.tabs</span>
</span><span class='line'>  <span class="nc">.tab</span> hello1
</span><span class='line'>  <span class="nc">.tab</span> hello2
</span><span class='line'>  <span class="nc">.tab.last-child</span> hello3
</span></code></pre></td></tr></table></div></figure>


<p>但是，奇怪的是css样式定义中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.tab.last-child</span><span class="o">,</span> <span class="nc">.tab</span><span class="nd">:last-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding-right</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样子在IE8中是不成功的，我很费解，非要将其分开：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nc">.tab.last-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding-right</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nc">.tab</span><span class="nd">:last-child</span> <span class="p">{</span>
</span><span class='line'>  <span class="na">padding-right</span><span class="o">:</span> <span class="mi">0</span><span class="kt">px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体也不知道什么原因！！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[好看样式CSS]]></title>
    <link href="http://shatle.github.com/blog/2013/08/11/good-css/"/>
    <updated>2013-08-11T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/08/11/good-css</id>
    <content type="html"><![CDATA[<p>收集一些好看的样式</p>

<h3>Input</h3>

<ul>
<li>代码地址：http://codepen.io/anon/pen/jivxd ，其利用 css3 的特性展现多种动画</li>
</ul>


<p><img src="http://shatle.github.com/images/photo/2013-08-11_09_14_50%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-11 09:14:50的屏幕截图.png" /></p>

<ul>
<li>http://dropthebit.com/demos/fancy_input/fancyInput.html ，这个也挺好的</li>
</ul>


<p><img src="http://shatle.github.com/images/photo/2013-08-17_10_10_58%E7%9A%84%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2013-08-17 10:10:58的屏幕截图.png" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Commands]]></title>
    <link href="http://shatle.github.com/blog/2013/08/07/Linux-Commands/"/>
    <updated>2013-08-07T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/08/07/Linux-Commands</id>
    <content type="html"><![CDATA[<p>用来记录各种 linux 下的有用命令！</p>

<h4>top</h4>

<p>动态查看机器的CPU、内存及各数据的变化。</p>

<h4>netlogs</h4>

<p><em>安装</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install netlogs</span></code></pre></td></tr></table></div></figure>


<p><em>使用命令</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo netlogs wlan0</span></code></pre></td></tr></table></div></figure>


<p><code>wlan0</code>是我无线的名称。使用网口的可能是<code>eth0</code>，但不一定。</p>

<p>对于到底是哪个呢，可使用命令<code>ip addr</code>，看到正在使用的网络名称，并替代<code>wlan0</code>。</p>

<h4>pushd, popd</h4>

<p>最近发现个有趣而有用的命令，<code>pushd .</code>把当前的目录放入栈中，然后通过<code>popd</code>命令回到此目录。</p>

<p>显示，对于经常访问并且地址很长的路径，是很有用的。否则，每次都要<code>cd</code>多累啊！</p>

<p>其实这个也很累，哈哈！</p>

<h4>apt-get</h4>

<p><code>apt-cache policy PACKAGE_NAME</code> 下载安装之前查看安装包，有哪些版本</p>

<p><code>apt-cache showpkg PACKAGE_NAME</code> 显示的内容更为详细些</p>

<p>列出版本之后，需要指定安装版本：<code>sudo apt-get install PACKAGE_NAME=version</code> version指定完整版本名称</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sublime ppa]]></title>
    <link href="http://shatle.github.com/blog/2013/07/21/sublime-ppa/"/>
    <updated>2013-07-21T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/07/21/sublime-ppa</id>
    <content type="html"><![CDATA[<p>最近出现状况：之前下载的submlime提示更新，重新下载后，又没多久又要更新。于是，有了用ppa的想法，但是ubuntu官方并没有提供ppa，不过网上有第三方提供的ppa。</p>

<p>这第三方为：webupd8</p>

<h3>Install</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo add-apt-repository ppa:webupd8team/sublime-text-2 
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install sublime-text</span></code></pre></td></tr></table></div></figure>


<p>当前，你还可以安装开发版本：sublime-text-dev</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Carrierwave to crop image with MiniMagick]]></title>
    <link href="http://shatle.github.com/blog/2013/07/16/Use-Carrierwave-to-crop-image-with-MiniMagick/"/>
    <updated>2013-07-16T14:18:00+08:00</updated>
    <id>http://shatle.github.com/blog/2013/07/16/Use-Carrierwave-to-crop-image-with-MiniMagick</id>
    <content type="html"><![CDATA[<p>做Web应用，常常要涉及到文件的上传，图片的上传就是其中之一。在Rails中，上传文件经常用到的是Carrierwave。</p>

<h3><a href="https://github.com/carrierwaveuploader/carrierwave">Carrierwave</a></h3>

<h4><a href="https://github.com/carrierwaveuploader/carrierwave#getting-started">创建方法</a></h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g uploader avatar</span></code></pre></td></tr></table></div></figure>


<p>之后会产生，文件<code>app/uploaders/avatar_uploader.rb</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class AvatarUploader &lt; CarrierWave::Uploader::Base
</span><span class='line'>  storage :file
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>使用</h4>

<p>1.直接使用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uploader = AvatarUploader.new
</span><span class='line'>uploader.store!(my_file)
</span><span class='line'>uploader.retrieve_from_store!('my_file.png')</span></code></pre></td></tr></table></div></figure>


<p>2.运用于 model 中:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User &lt; ActiveRecord::Base
</span><span class='line'>  mount_uploader :avatar, AvatarUploader
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>这样有个好处，可以利用 model 传入各种操作参数，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def crop
</span><span class='line'>  if model.crop_x.present?
</span><span class='line'>    resize_to_limit(700, 700)
</span><span class='line'>
</span><span class='line'>    manipulate! do |img|
</span><span class='line'>      x = model.crop_x
</span><span class='line'>      y = model.crop_y
</span><span class='line'>      w = model.crop_w
</span><span class='line'>      h = model.crop_h
</span><span class='line'>
</span><span class='line'>      size = w &lt;&lt; 'x' &lt;&lt; h
</span><span class='line'>      offset = '+' &lt;&lt; x &lt;&lt; '+' &lt;&lt; y
</span><span class='line'>
</span><span class='line'>      img.crop("#{size}#{offset}") # Doesn't return an image...
</span><span class='line'>      img # ...so you'll neet to call it yourself
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>可能会遇到这种情况：想传入参数，但是并不要 ActiveRecord、MongoMapper、MongoId 等等 ORM 的中间件，那么可以这样子：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Avatar
</span><span class='line'>  extend CarrierWave::Mount
</span><span class='line'>
</span><span class='line'>  attr_accessor :crop_w, :crop_h, :crop_x, :crop_y
</span><span class='line'>  mount_uploader :image, AvatarUploader
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>CarrierWave::Mount</code>之中包含了<code>mount_uploader</code>方法的定义。</p>

<h3><a href="http://carrierwave.rubyforge.org/rdoc/classes/CarrierWave/RMagick.html">RMagick</a> vs <a href="http://carrierwave.rubyforge.org/rdoc/classes/CarrierWave/MiniMagick.html">MiniMagick</a></h3>

<blockquote><p>http://stackoverflow.com/questions/8418973/undefined-method-crop-using-carrierwave-with-minimagick-on-rails-3-1-3#answer-9961434</p></blockquote>

<p>RMagick 和 MiniMagick 是不一样的，MiniMagick 较 RMagick 更为轻量级。RMagick 根据 Ruby 的语法规则定义了许多操作图片的方法，如：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rmagick_image.crop(x_offset, y_offset, width, height) # Returns an image object
</span><span class='line'>rmagick_image.crop!(x_offset, y_offset, width, height) # Edits object in place</span></code></pre></td></tr></table></div></figure>


<p>而 MiniMagick 运用了元编程的方法，动态的创建请求的方法（创建的<a href="https://github.com/minimagick/minimagick/blob/c12decb8bf45383a3b1ea602c320ff79f49d2b79/lib/mini_magick.rb#L456">规则</a>）。方法直接访问 <a href="http://www.imagemagick.org/www/mogrify.html">mogrify</a>，并不会返回图片本身对象：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>minimagick_image.crop('100x200') # Translates to `mogrify -crop 100x200 image.ext`
</span><span class='line'>minimagick_image.polaroid('12')  # Executes `mogrify -polaroid 12 image.ext`</span></code></pre></td></tr></table></div></figure>


<p>所以 MiniMagick 中没有 Ruby 语法式的 crop! 方法。</p>

<h3>MiniMagick</h3>

<h4>crop</h4>

<p>要裁剪图片，不得不谈到 crop 方法。使用的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 'w' means width 宽
</span><span class='line'># 'h' means height 高
</span><span class='line'># 'x' means x-offset x轴偏移量
</span><span class='line'># 'y' means y-offset y轴偏移量
</span><span class='line'>image.crop("wxh+x+y")</span></code></pre></td></tr></table></div></figure>


<h4>resize</h4>

<p>参照 <a href="http://www.imagemagick.org/Usage/resize/#noaspect">imagemagick</a></p>

<p>在 MiniMagick 使用中，前面四种方法对应有</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>resize("64x64!") # 固定大小，64x64
</span><span class='line'>resize("64x64&gt;") # 使大图像变小，小的不变；调整后，宽和高都不能大于64
</span><span class='line'>resize("64x64&lt;") # 使小图像变大，大的不变；调整后，宽和高都不小于64
</span><span class='line'>resize("64x64^") # 使最小的宽或高变为64，另外一个按比例放大或者缩小</span></code></pre></td></tr></table></div></figure>


<p>这四种方法对照链接中的图片，理解会更加容易些。</p>

<p>在　process 中不能直接使用　resize 方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>process resize: "300x300^" # 这会找不到resize方法</span></code></pre></td></tr></table></div></figure>


<p>有一场景：在页面中，将上传的图片以300x300显示来预览，即缩放后的图片最大的边变成300。并且，进行特定格式的截图，如　100x100，代码有：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>version :thumb do 
</span><span class='line'>  process :lazy_resize_300
</span><span class='line'>  process :cropper
</span><span class='line'>  process :force_resize_100x100!
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def lazy_resize_300
</span><span class='line'>  manipulate! do |img| 
</span><span class='line'>    img.resize "300x300^" if img[:width].to_i &lt; 300 && img[:height].to_i &lt; 300
</span><span class='line'>    img.resize "300x300&gt;"
</span><span class='line'>    img
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def force_resize_100x100!
</span><span class='line'>  manipulate! do |img| 
</span><span class='line'>    img.resize "100x100!"
</span><span class='line'>    img
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>def cropper
</span><span class='line'>  manipulate! do |img|      
</span><span class='line'>    x = model.crop_x
</span><span class='line'>    y = model.crop_y
</span><span class='line'>    w = model.crop_w
</span><span class='line'>    h = model.crop_h
</span><span class='line'>    size = w &lt;&lt; 'x' &lt;&lt; h
</span><span class='line'>    offset = '+' &lt;&lt; x &lt;&lt; '+' &lt;&lt; y
</span><span class='line'>    img.crop("#{size}#{offset}") # Doesn't return an image...
</span><span class='line'>    img # ...so you'll neet to call it yourself
</span><span class='line'>  end 
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
